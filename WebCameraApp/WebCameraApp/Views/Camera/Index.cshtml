@{
    ViewData["Title"] = "Camera Test";
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
    rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
<div class="col-12" style="align-items:center">
    <div id="camera-container">
        <video id="videoviewer"></video>
    </div>
    <div style="align-items:center">
        <button onclick="takephoto()">Take Photo</button>
        <button onclick="flip()">Flip Camera</button>
    </div>
    <div id="showpreview">
        <img id="previewimg" />
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
    crossorigin="anonymous"></script>
<script>
    let videoDevice;
    let canvas = document.getElementById('camera-container');
    let photo = document.getElementById('previewimg');
    let video = document.getElementById('videoviewer');
    let imageCapture;
    let facingMode = "user";

    navigator.mediaDevices.getUserMedia(constrains()).then(gotMedia).catch(failedToGetMedia);

     /* Get media constraints */
      function getMediaConstraints() {
          var videoConstraints = {};
          if (this._selectedDeviceId == '') {
              videoConstraints.facingMode =  this._facingMode;
          } else {
              videoConstraints.deviceId = { exact: this._selectedDeviceId};
          }
          videoConstraints.width = {exact: this._webcamElement.width};
          videoConstraints.height = {exact: this._webcamElement.height};
          var constraints = {
              video: videoConstraints,
              audio: false
          };
          return constraints;
      }

      /* Get all video input devices info */
      getVideoInputs(mediaDevices){
        this._webcamList = [];
        mediaDevices.forEach(mediaDevice => {
          if (mediaDevice.kind === 'videoinput') {
            this._webcamList.push(mediaDevice);
          }
        });
        if(this._webcamList.length == 1){
          this._facingMode = 'user';
        }    
        return this._webcamList;
      }

      get facingMode(){
        return this._facingMode;
      }

      set facingMode(value){
        this._facingMode = value;
      }

      get webcamList(){
        return this._webcamList;
      }

      get webcamCount(){
        return this._webcamList.length;
      }

      get selectedDeviceId(){
        return this._selectedDeviceId;
      }

    function gotMedia(mediaStream) {
        // Extract video track.
        videoDevice = mediaStream.getVideoTracks()[0];
        video.srcObject = mediaStream;
        video.play();
        // Check if this device supports a picture mode...
        imageCapture = new ImageCapture(videoDevice);
        //if (captureDevice) {
        //    captureDevice.takePhoto().then(processPhoto).catch(stopCamera);
        //    //captureDevice.grabFrame().then(processFrame).catch(stopCamera);
        //}
    }

    function takephoto(){
        if (imageCapture) {
            imageCapture.takePhoto().then(processPhoto).catch(stopCamera);
            //captureDevice.grabFrame().then(processFrame).catch(stopCamera);
        }
    }

    function processPhoto(blob) {
        photo.src = window.URL.createObjectURL(blob);
    }

    function processFrame(imageBitmap) {
        canvas.width = imageBitmap.width;
        canvas.height = imageBitmap.height;
        canvas.getContext('2d').drawImage(imageBitmap, 0, 0);
    }

    function stopCamera(error) {
        //console.error(error);
        if (videoDevice) videoDevice.stop();  // turn off the camera
    }

    function failedToGetMedia(error){
        console.error('getUserMedia() error:', error);
    }

    photo.addEventListener('load', function() {
        // After the image loads, discard the image object to release the memory
        window.URL.revokeObjectURL(this.src);
    });
</script>